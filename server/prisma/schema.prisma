generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                            String              @id @default(cuid())
  email                                         String              @unique
  password                                      String?
  role                                          Role                @default(WORKER)
  isEmailConfirmed                              Boolean             @default(false)
  confirmationToken                             String?             @unique
  googleId                                      String?             @unique
  firstName                                     String?
  lastName                                      String?
  avatar                                        String?
  createdAt                                     DateTime            @default(now())
  updatedAt                                     DateTime            @updatedAt
  receivedAdminMessages                         AdminMessage[]      @relation("AdminMessageRecipient")
  sentAdminMessages                             AdminMessage[]      @relation("AdminMessageSender") // DODANE: wiadomości wysłane przez użytkownika
  sentAdminMessageReplies                       AdminMessageReply[] @relation("AdminMessageReplySender") // DODANE: odpowiedzi wysłane przez użytkownika
  analytics                                     Analytics[]
  createdCompanies                              Company[]           @relation("CompanyCreator")
  jobApplications                               JobApplication[]
  createdJobOffers                              JobOffer[]          @relation("JobOfferCreator")
  jobViews                                      JobView[]
  createdMaterials                              Material[]          @relation("MaterialCreator")
  receivedMessages                              Message[]           @relation("MessageReceiver")
  sentMessages                                  Message[]           @relation("MessageSender")
  notifications                                 Notification[]
  createdProjects                               Project[]           @relation("ProjectCreator")
  reports                                       Report[]
  savedSearches                                 SavedSearch[]
  searchHistory                                 SearchHistory[]
  subscription                                  Subscription?
  assignedTasks                                 Task[]              @relation("TaskAssignee")
  createdTasks                                  Task[]              @relation("TaskCreator")
  createdWorkRequests                           WorkRequest[]       @relation("WorkRequestCreator")
  workerProfiles                                Worker[]

  @@map("users")
}

model PlansAdmin {
  id                String       @id @default(cuid())
  email             String       @unique
  password          String
  firstName         String?
  lastName          String?
  isActive          Boolean      @default(true)
  lastLoginAt       DateTime?
  passwordChangedAt DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  planChanges       PlanChange[]
  admin_messages    AdminMessage[]
  admin_message_replies AdminMessageReply[] // DODANE: relacja zwrotna do odpowiedzi admina

  @@map("plans_admins")
}

model PlanChange {
  id          String     @id @default(cuid())
  planId      String
  planName    String
  changeType  String
  oldValues   Json?
  newValues   Json?
  description String?
  createdAt   DateTime   @default(now())
  adminId     String
  admin       PlansAdmin @relation(fields: [adminId], references: [id])

  @@map("plan_changes")
}

model Company {
  id           String        @id @default(cuid())
  name         String
  nip          String?       @unique
  address      String?
  phone        String?
  email        String?
  website      String?
  logo         String?
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  createdById  String
  latitude     Float?
  longitude    Float?
  analytics    Analytics[]
  createdBy    User          @relation("CompanyCreator", fields: [createdById], references: [id])
  jobOffers    JobOffer[]
  materials    Material[]
  projects     Project[]
  reports      Report[]
  tags         Tag[]
  workRequests WorkRequest[]
  workers      Worker[]

  @@map("companies")
}

model Worker {
  id               String       @id @default(cuid())
  status           WorkerStatus @default(INVITED)
  invitedAt        DateTime     @default(now())
  joinedAt         DateTime?
  leftAt           DateTime?
  position         String?
  canEdit          Boolean      @default(false)
  canView          Boolean      @default(true)
  canManageFinance Boolean      @default(false)
  userId           String
  companyId        String
  company          Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("workers")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  deadline    DateTime?
  budget      Float?
  location    String?
  clientName  String?
  clientEmail String?
  clientPhone String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  companyId   String
  createdById String
  materials   Material[]
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy   User          @relation("ProjectCreator", fields: [createdById], references: [id])
  tasks       Task[]
  tags        Tag[]         @relation("ProjectToTag")

  @@map("projects")
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  startDate      DateTime?
  dueDate        DateTime?
  estimatedHours Float?
  actualHours    Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  projectId      String
  assignedToId   String?
  createdById    String
  assignedTo     User?      @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdBy      User       @relation("TaskCreator", fields: [createdById], references: [id])
  project        Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tags           Tag[]      @relation("TagToTask")

  @@map("tasks")
}

model Material {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?
  unit        String   @default("szt")
  quantity    Float    @default(0)
  minQuantity Float?
  price       Float?
  supplier    String?
  location    String?
  barcode     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyId   String
  projectId   String?
  createdById String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy   User     @relation("MaterialCreator", fields: [createdById], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  tags        Tag[]    @relation("MaterialToTag")

  @@map("materials")
}

model JobOffer {
  id           String           @id @default(cuid())
  title        String
  description  String
  category     JobCategory
  type         JobType          @default(FULL_TIME)
  country      String           @default("Polska")
  voivodeship  String
  city         String
  address      String?
  latitude     Float?
  longitude    Float?
  salaryMin    Float?
  salaryMax    Float?
  currency     String           @default("PLN")
  experience   ExperienceLevel  @default(JUNIOR)
  requirements String?
  benefits     String?
  contactEmail String?
  contactPhone String?
  isActive     Boolean          @default(true)
  isPublic     Boolean          @default(true)
  expiresAt    DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  companyId    String
  createdById  String
  viewCount    Int              @default(0)
  applications JobApplication[]
  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy    User             @relation("JobOfferCreator", fields: [createdById], references: [id])
  views        JobView[]
  messages     Message[]

  @@map("job_offers")
}

model JobView {
  id         String   @id @default(cuid())
  ipAddress  String
  userAgent  String?
  sessionId  String?
  userId     String?
  viewedAt   DateTime @default(now())
  jobOfferId String
  jobOffer   JobOffer @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@unique([jobOfferId, ipAddress])
  @@map("job_views")
}

model JobApplication {
  id          String            @id @default(cuid())
  message     String?
  cvUrl       String?
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  reviewedAt  DateTime?
  notes       String?
  jobOfferId  String
  applicantId String
  applicant   User              @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  jobOffer    JobOffer          @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)

  @@unique([jobOfferId, applicantId])
  @@map("job_applications")
}

model WorkRequest {
  id           String       @id @default(cuid())
  title        String
  description  String
  category     WorkCategory
  type         RequestType  @default(ONE_TIME)
  country      String       @default("Polska")
  voivodeship  String
  city         String
  address      String?
  latitude     Float?
  longitude    Float?
  budgetMin    Float?
  budgetMax    Float?
  currency     String       @default("PLN")
  deadline     DateTime?
  requirements String?
  materials    String?
  contactEmail String?
  contactPhone String?
  isActive     Boolean      @default(true)
  isPublic     Boolean      @default(true)
  expiresAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  companyId    String?
  createdById  String
  messages     Message[]
  company      Company?     @relation(fields: [companyId], references: [id])
  createdBy    User         @relation("WorkRequestCreator", fields: [createdById], references: [id])

  @@map("work_requests")
}

model Message {
  id            String       @id @default(cuid())
  content       String
  isRead        Boolean      @default(false)
  createdAt     DateTime     @default(now())
  senderId      String
  receiverId    String
  jobOfferId    String?
  workRequestId String?
  jobOffer      JobOffer?    @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  receiver      User         @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender        User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  workRequest   WorkRequest? @relation(fields: [workRequestId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model SubscriptionPlan {
  id                 String         @id @default(cuid())
  name               String         @unique
  displayName        String
  description        String?
  price              Float
  currency           String         @default("PLN")
  maxCompanies       Int            @default(1)
  maxProjects        Int            @default(5)
  maxWorkers         Int            @default(10)
  maxJobOffers       Int            @default(3)
  maxWorkRequests    Int            @default(5)
  maxStorageGB       Float          @default(1.0)
  hasAdvancedReports Boolean        @default(false)
  hasApiAccess       Boolean        @default(false)
  hasPrioritySupport Boolean        @default(false)
  hasCustomBranding  Boolean        @default(false)
  hasTeamManagement  Boolean        @default(false)
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  subscriptions      Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                   String             @id @default(cuid())
  status               SubscriptionStatus @default(TRIAL)
  startDate            DateTime           @default(now())
  endDate              DateTime?
  trialEndDate         DateTime?
  nextBillingDate      DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  cancelReason         String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userId               String             @unique
  planId               String
  payments             Payment[]
  plan                 SubscriptionPlan   @relation(fields: [planId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Payment {
  id                    String        @id @default(cuid())
  amount                Float
  currency              String        @default("PLN")
  status                PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  stripeInvoiceId       String?
  description           String?
  receiptUrl            String?
  invoiceUrl            String?
  paidAt                DateTime?
  failedAt              DateTime?
  refundedAt            DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  subscriptionId        String
  subscription          Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Analytics {
  id        String        @id @default(cuid())
  type      AnalyticsType
  data      Json
  period    String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  companyId String
  company   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model Report {
  id          String       @id @default(cuid())
  name        String
  type        ReportType
  config      Json
  data        Json?
  status      ReportStatus @default(PENDING)
  isScheduled Boolean      @default(false)
  schedule    String?
  filePath    String?
  fileFormat  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  generatedAt DateTime?
  userId      String
  companyId   String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Tag {
  id          String     @id @default(cuid())
  name        String
  color       String     @default("#3B82F6")
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  materials   Material[] @relation("MaterialToTag")
  projects    Project[]  @relation("ProjectToTag")
  tasks       Task[]     @relation("TagToTask")

  @@unique([name, companyId])
  @@map("tags")
}

model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  filters   Json?
  results   Int      @default(0)
  category  String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

model SavedSearch {
  id        String   @id @default(cuid())
  name      String
  query     String
  filters   Json?
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("saved_searches")
}

model AdminMessage {
  id                                   String              @id @default(cuid())
  subject                              String
  content                              String
  priority                             MessagePriority     @default(NORMAL)
  status                               MessageStatus       @default(UNREAD)
  createdAt                            DateTime            @default(now())
  updatedAt                            DateTime            @updatedAt
  senderId                             String?             // Opcjonalne - może być null dla adminów
  senderType                           SenderType          // Enum zamiast String
  senderAdminId                        String?             // ID admina z plansAdmin
  senderAdmin                          PlansAdmin?         @relation(fields: [senderAdminId], references: [id])
  recipientId                          String
  replies                              AdminMessageReply[]
  recipient                            User                @relation("AdminMessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  senderUser                           User?               @relation("AdminMessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("admin_messages")
}

model AdminMessageReply {
  id        String       @id @default(cuid())
  content   String
  createdAt DateTime     @default(now())
  messageId String
  senderId  String?      // Opcjonalne - może być null dla adminów
  senderType SenderType  // Enum zamiast String
  senderAdminId String?  // ID admina z plansAdmin
  message   AdminMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  senderAdmin PlansAdmin? @relation(fields: [senderAdminId], references: [id])
  senderUser User?       @relation("AdminMessageReplySender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("admin_message_replies")
}

enum Role {
  SUPERADMIN
  BOSS
  WORKER
}

enum WorkerStatus {
  INVITED
  ACTIVE
  INACTIVE
  LEFT
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum JobCategory {
  CONSTRUCTION_WORKER
  ELECTRICIAN
  PLUMBER
  PAINTER
  CARPENTER
  MASON
  ROOFER
  TILER
  FOREMAN
  ARCHITECT
  ENGINEER
  HEAVY_EQUIPMENT
  LANDSCAPING
  DEMOLITION
  OTHER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  FREELANCE
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
  EXPERT
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum WorkCategory {
  CONSTRUCTION
  RENOVATION
  REPAIR
  INSTALLATION
  MAINTENANCE
  DEMOLITION
  LANDSCAPING
  CLEANING
  PAINTING
  ELECTRICAL
  PLUMBING
  ROOFING
  FLOORING
  WINDOWS_DOORS
  OTHER
}

enum RequestType {
  ONE_TIME
  RECURRING
  PROJECT
  URGENT
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAUSED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_OVERDUE
  PROJECT_CREATED
  PROJECT_UPDATED
  MESSAGE_RECEIVED
  WORKER_INVITED
  WORKER_JOINED
  JOB_APPLICATION
  MATERIAL_LOW
  SUBSCRIPTION_TRIAL_ENDING
  SUBSCRIPTION_EXPIRED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SYSTEM_UPDATE
  ADMIN_MESSAGE
  ADMIN_MESSAGE_REPLY
  SUBSCRIPTION_EXPIRING
  PAYMENT_DUE
}

enum AnalyticsType {
  PROJECT_PROGRESS
  COST_ANALYSIS
  TIME_TRACKING
  TEAM_PERFORMANCE
  TASK_METRICS
  MATERIAL_USAGE
  FINANCIAL_OVERVIEW
  PRODUCTIVITY_TRENDS
}

enum ReportType {
  PROJECT_SUMMARY
  FINANCIAL_REPORT
  TEAM_PRODUCTIVITY
  TASK_COMPLETION
  MATERIAL_INVENTORY
  TIME_TRACKING
  COST_BREAKDOWN
  CUSTOM_REPORT
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  SCHEDULED
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
}

enum MessageStatus {
  UNREAD
  READ
  SENT
  ARCHIVED
}

enum SenderType {
  USER
  ADMIN
}
