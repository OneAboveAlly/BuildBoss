version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: buildboss-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: buildboss
      POSTGRES_USER: buildboss
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-buildboss123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/prisma/migrations:/docker-entrypoint-initdb.d/migrations:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U buildboss -d buildboss"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - buildboss-network

  # Redis for sessions and caching
  redis:
    image: redis:7-alpine
    container_name: buildboss-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - buildboss-network

  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: buildboss-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://buildboss:${POSTGRES_PASSWORD:-buildboss123}@postgres:5432/buildboss
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_uploads:/app/server/uploads
      - app_logs:/app/server/logs
    healthcheck:
      test: ["CMD", "node", "server/healthcheck.js", "detailed"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - buildboss-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: buildboss-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - buildboss-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  buildboss-network:
    driver: bridge 